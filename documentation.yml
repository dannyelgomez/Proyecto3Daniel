openapi: 3.0.1
info:
  title: Delilah Resto
  description: API Backend restaurante de Arepas.
  contact:
    email: nombre@mail.com
  version: 1.0.0
externalDocs:
  description: Github Repository
  url: https://github.com/dannyelgomez/Proyect-3/tree/master
servers:
  - url: https://localhost:3000/
  - url: http://localhost:3000/
tags:
  - name: User
    description: Create, Login, Get, Update, Delete de usuarios
  - name: Orders
    description: Get, Add, Update, Delete de órdenes
  - name: Products
    description: Get, Add, Update, Delete de productos

paths:
#USUARIOS
  /createUser:
    post:
      tags:
        - User
      summary: Crear usuario
      description: Crea nuevos usuarios en la base de datos
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        200:
          description: El usuario ha sido creado
        400:
          description: petición incompleta o equivocada
        default:
          $ref: "#/components/responses/Default"
          
  /login:
    post:
      tags:
        - User
      summary: Loguear usuarios
      description: loguea usuario con username y password
      operationId: Login
      requestBody:
        description: Login user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      security: []
      responses:
        200:
          description: Token
        400:
          description: petición incompleta o equivocada
        default:
          $ref: "#/components/responses/Default"
          
  /getUser:
    get:
      tags:
        - User
      summary: Obtener usuarios
      description: loguea usuario con username y password
      operationId: Get
      security:
        - bearerAuth: [] 
      parameters:
      - name: "Bearer token"
        in: "header"   
        required: true
        schema:
          $ref: "#/components/schemas/Token"
      responses:
        200:
          description: pte
        400:
          description: petición incompleta o equivocada
        default:
          $ref: "#/components/responses/Default"
          
  /updateUser:
    put:
      tags:
        - User
      summary: Actualizar usuarios
      description: loguea usuario con username y password
      operationId: Put
      requestBody:
        description: Login user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      security:
        - bearerAuth: [] 
      responses:
        200:
          description: pte
        400:
          description: petición incompleta o equivocada
        default:
          $ref: "#/components/responses/Default"
  
  /deleteUser:
    delete:
      tags:
        - User
      summary: Eliminar usuarios
      description: loguea usuario con username y password
      operationId: Delete
      security:
        - bearerAuth: [] 
      responses:
        200:
          description: pte
        400:
          description: petición incompleta o equivocada
        default:
          $ref: "#/components/responses/Default"

#ORDENES
  /getOrder:
    get:
      tags:
        - Orders
      summary: Obtener órdenes
      description: Consulta órdenes
      operationId: getOrder
      responses:
        200:
          description: Orden agregada correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: petición incompleta o equivocada
        default:
          $ref: "#/components/responses/Default"
            
  /addOrder/:id:
    post:
      tags:
        - Orders
      summary: Agrega una orden
      description: Agrega ordenes de acuerdo a los productos seleccionados
      operationId: addOrder
      requestBody:
        description: Order to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addOrder"
        required: true
      responses:
        200:
          description: Orden agregada correctamente
        400:
          description: petición incompleta o equivocada
        default:
          $ref: "#/components/responses/Default"

  /updateOrder/:id:
    put:
      tags:
        - Orders
      summary: Actualiza la orden (Admin)
      description: Actualiza toda la información de la orden de acuerdo a la id de la orden
      operationId: updateOrder
      parameters:
        - name: id
          in: query
          example: id=1
          description: Necesitamos la identificacion de la orden.
          required: true
          schema:
            type: integer
      requestBody:
        description: updateOrder
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: Entregado
        required: true
      responses:
        200:
          description: "Orden ${id} fue modificada correctamente"
        400:
          description: No se envio identificacion o estatus
        401:
          $ref: "#/components/responses/UnauthorizedAdmin"
        403:
          description: El parametro identificación debe ser numero
        404:
          description: No se encontraron resultados
        default:
          $ref: "#/components/responses/Default"
          
  /deleteOrder/:id:
    delete:
      tags:
        - Orders
      summary: Eliminar orden (Admin)
      description: Elimina una orden por la identificacion.
      parameters:
        - name: id
          in: query
          example: id=1
          description: Necesitamos la identificacion de la orden.
          required: true
          schema:
            type: string
      operationId: deleteOrder
      responses:
        200:
          description: "Se elimino la orden ${id} correctamente"
        400:
          description: No se envio identificacion o estatus
        401:
          $ref: "#/components/responses/UnauthorizedAdmin"
        default:
          $ref: "#/components/responses/Default"
  
#PRODUCTOS
  /getProducts:
    get:
      tags:
        - Products
      summary: Obtiene todos los productos
      description: Devuelve una lista de productos
      operationId: getProducts
      parameters:
        - name: search
          in: query
          description: busca todos los productos
          schema:
            type: string
      responses:
        200:
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        400:
          description: Error buscando informacion
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/Default"

  /getProducts/:id:
    get:
      tags:
        - Products
      summary: Consultar productos
      description: Consulta todos los productos por identificacion
      parameters:
        - name: id
          in: query
          example: id=1
          description: Necesitamos la identificacion del producto.
          required: true
          schema:
            type: string
      operationId: getProductsid
      responses:
        200:
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Error buscando informacion
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/Default"
    
  /addProducts/:id:      
    post:
      tags:
        - Products
      summary: Agrega producto (Admin)
      description: Agrega producto a la base de datos
      operationId: addProducts
      requestBody:
        description: Agrega un producto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        201:
          description: Producto agregado correctamente
        400:
          description: petición incompleta o equivocada
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/Default"

  /updateProducts/:id:  
    put:
      tags:
        - Products
      summary: Actualiza producto (Admin)
      description: Actualiza el estado de un producto por la identificacion
      parameters:
        - name: id
          in: query
          example: id=1
          description: Necesitamos la identificacion del producto.
          required: true
          schema:
            type: string
      operationId: updateProducts
      requestBody:
        description: Modification data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Actualización satisfatoria
        400:
          description: petición incompleta o equivocada
        401:
          $ref: "#/components/responses/UnauthorizedAdmin"
        default:
          $ref: "#/components/responses/Default"

  /deleteProducts/:id:  
    delete:
      tags:
        - Products
      summary: Elimina un producto (Admin)
      description: Elimina el producto por la identificacion
      parameters:
        - name: id
          in: query
          example: id=1
          description: Necesitamos la identificacion del producto.
          required: true
          schema:
            type: string
      operationId: deleteProducts
      responses:
        200:
          description: "Producto eliminado por id ${id}"
        400:
          description: No se puede eliminar producto con id:${id}
        401:
          $ref: "#/components/responses/UnauthorizedAdmin"
        406:
          description: Falta identificación
        default:
          $ref: "#/components/responses/Default"

          
#COMPONENTES
components:
  schemas:
    createUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        username:
          type: string
          example: daniel
        password:
          type: string
          example: danny123
        email:
          type: string
          example: danny57@gmail.com
        delivery_address:
          type: string
          example: Cra 14 # 8-12
        full_name:
          type: string
          example: Dannyel Gomez
        phone:
          type: integer
          example: 3007243432
    login:
      type: object
      properties:
        username:
          type: string
          example: daniel
        password:
          type: string
          example: danny123
#Schema-Products
    Product:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        name:
          type: string
          example: Arepa pollo champiñones
        price:
          type: number
          example: 9
        img_url:
          type: string
          example: https://via.placeholder.com/231
        description:
          type: string
          example: pollo, salchicha, champiñones
        is_disabled:
          type: boolean
          example: 0
          
    Product2:
      type: object
      properties:
        product_id:
          type: integer
          example: 2
        name:
          type: string
          example: Arepa hawaiana
        price:
          type: number
          example: 8
        img_url:
          type: string
          example: https://via.placeholder.com/327
        description:
          type: string
          example: piña, queso, salchicha
        is_disabled:
          type: boolean
          example: 0
    Products:
      type: object
      properties:
        1:
          type: object
          $ref: "#/components/schemas/Product"
        2:
          type: object
          $ref: "#/components/schemas/Product2"
    
#schema-Orders_Products
    OrderProduct:
      type: object
      properties:
        order_prod_id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 3
        product_id:
          type: integer
          example: 2
        product_amount:
          type: integer
          example: 5

    
#schema-Orders
    Order:
      type: object
      properties:
        order_id:
          type: integer
          example: 1
        status:
          type: string
          example: entr
        date:
          type: string
          format: date-time
          example: "2020-10-31T21:47:04.000Z"
        description:
          type: string
          example: "2 x Arepa ranchera"
        payment_method:
          type: string
          example: "card"
        total:
          type: integer
          example: 20
        user_id:
          type: integer
          example: 1
        is_disable:
          type: string
          example: 0

    addOrder:
      type: object
      properties:
        payment_method:
          type: string
          example: money
        products:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
                example: 4
              amount:
                type: integer
                example: 1
    updateOrder:
      type: object
      properties:
        status:
          type: string
          example: Entr
                
    Token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJmdWxsbmFtZSI6IlZpZWpvbiIsImVtYWlsIjoiVmllam9AZW1haWwuY29tIiwiaXNfYWRtaW4iOjEsImlhdCI6MTYwNDg2NDg3Nn0.NV3rgbpByRDwBMmqlJNHInbAVvwVyPunlk9UbpPmLDQ
    Error:
      type: object
      properties:
        error:
          type: string
          example: "An error has ocurred: <error>"
      required:
        - error
    Send:
      type: string
      example: "Error message"
      
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # Reused Responses
  responses:
    UnauthorizedError:
      description: Invalid Token
    Disabled:
      description: Invalid request, user account is disabled
    NotAdmin:
      description: Operation forbidden, not an admin
    NotFound:
      description: The specified resource was not found
    Default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Send"
          examples:
            Token Invalidation:
              summary: Unauthorized - Invalid Token
              value: Unauthorized - Invalid Token
            Disabled Account:
              summary: Unauthorized - Account is Disabled
              value: Unauthorized - User account is disabled
    UnauthorizedAdmin:
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Send"
          examples:
            Token Invalidation:
              summary: Unauthorized - Invalid Token
              value: Unauthorized - Invalid Token
            Disabled Account:
              summary: Unauthorized - Account is Disabled
              value: Unauthorized - User account is disabled
            Not Admin:
              summary: Unauthorized - Not an admin
              value: Unauthorized - Not an admin
              
    products:
      description: Productos
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Product'
security:
  - bearerAuth: []